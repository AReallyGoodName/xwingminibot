#!/usr/bin/python

"""
Please read this before connecting to Reddit:

https://github.com/reddit/reddit/wiki/API
https://praw.readthedocs.org/en/stable/pages/oauth.html
"""

# user agent see https://github.com/reddit/reddit/wiki/API
user_agent = "python/urllib"

# enter this url in reddit https://www.reddit.com/prefs/apps/
# don't change: the same ip and port are used below from local server
redirect_uri = 'http://127.0.0.1:65010/authorize_callback'
# see below, starts webserver and browser
redirect_is_local = True


# created in https://www.reddit.com/prefs/apps/
client_id = 'here'
client_secret = 'here'


# refresh tokens for quick login, created from code below
refresh_token = "here"
# backup token may be equal to refresh_token
backup_refresh_token = "here"

# bot sends messages to admin if refresh fails
# bot forwards PMs to admin if they don't contain cards
username = "XWingMiniaturesBot"
admin_username = 'AReallyGoodName'
# subreddits to visit
subreddits = ["sandboxtest"]


"""
    following is code to get a refresh_token

    - create an app at reddit https://www.reddit.com/prefs/apps/
    - copy client id and secret and paste it above
    - python credentials.py
    - copy auth code
    - python credentials.py theauthcode
    - copy paste refresh token above
"""
def stepOne(r):
    """ getting a refresh token step 1 """
    url = r.get_authorize_url(username, 'identity read submit privatemessages', True)
    print("copy, call url and confirm, copy code from redirected url")
    print(url)
    if redirect_is_local:
        import webbrowser
        webbrowser.open(url)

def stepTwo(r, code):
    """ getting a refresh token step 2 """
    print("refresh token:", r.get_access_information(code)['refresh_token'])


if __name__ == "__main__":
    import sys
    import http.server
    from urllib.parse import urlparse
    import praw

    r = praw.Reddit(user_agent=user_agent)
    r.set_oauth_app_info(client_id=client_id,
                         client_secret=client_secret,
                         redirect_uri=redirect_uri)

    if len(sys.argv) == 1:
        stepOne(r)
        # start local http server for callback, prints code for step 2
        if redirect_is_local:
            class CallbackHandler(http.server.BaseHTTPRequestHandler):
                def do_GET(self):
                    query = urlparse(self.path).query
                    query_components = dict(qc.split("=") for qc in query.split("&"))
                    print("auth code:", query_components['code'])
                    self.wfile.write(bytes(query_components['code'], "utf8"))

            server = http.server.HTTPServer(("127.0.0.1", 65010), CallbackHandler)
            server.timeout = None
            server.handle_request()
            server.server_close()
    elif len(sys.argv) == 2:
        stepTwo(r, sys.argv[1])
    else:
        print("start with no parameter or code")
